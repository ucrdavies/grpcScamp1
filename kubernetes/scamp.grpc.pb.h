// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scamp.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_scamp_2eproto__INCLUDED
#define GRPC_scamp_2eproto__INCLUDED

#include "scamp.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace SCAMPProto {

// The greeting service definition.
class SCAMPService final {
 public:
  static constexpr char const* service_full_name() {
    return "SCAMPProto.SCAMPService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::SCAMPProto::SCAMPWork* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>> AsyncRequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>>(AsyncRequestSCAMPWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>> PrepareAsyncRequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>>(PrepareAsyncRequestSCAMPWorkRaw(context, request, cq));
    }
    virtual ::grpc::Status SCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::SCAMPProto::SCAMPResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>> AsyncSCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>>(AsyncSCAMPCombinerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>> PrepareAsyncSCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>>(PrepareAsyncSCAMPCombinerRaw(context, request, cq));
    }
    virtual ::grpc::Status ReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::SCAMPProto::SCAMPResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>> AsyncReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>>(AsyncReportTileFailureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>> PrepareAsyncReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>>(PrepareAsyncReportTileFailureRaw(context, request, cq));
    }
    virtual ::grpc::Status IssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::SCAMPProto::SCAMPStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>> AsyncIssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>>(AsyncIssueNewJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>> PrepareAsyncIssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>>(PrepareAsyncIssueNewJobRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::SCAMPProto::SCAMPStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>> AsyncCheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>>(AsyncCheckJobStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>> PrepareAsyncCheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>>(PrepareAsyncCheckJobStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::SCAMPProto::SCAMPWork* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>> AsyncFetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>>(AsyncFetchJobResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>> PrepareAsyncFetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>>(PrepareAsyncFetchJobResultRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestSCAMPWork(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RequestSCAMPWork(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SCAMPCombiner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SCAMPCombiner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportTileFailure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ReportTileFailure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IssueNewJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IssueNewJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckJobStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckJobStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void FetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void FetchJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>* AsyncRequestSCAMPWorkRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>* PrepareAsyncRequestSCAMPWorkRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>* AsyncSCAMPCombinerRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>* PrepareAsyncSCAMPCombinerRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>* AsyncReportTileFailureRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPResult>* PrepareAsyncReportTileFailureRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>* AsyncIssueNewJobRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>* PrepareAsyncIssueNewJobRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>* AsyncCheckJobStatusRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPStatus>* PrepareAsyncCheckJobStatusRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>* AsyncFetchJobResultRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SCAMPProto::SCAMPWork>* PrepareAsyncFetchJobResultRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::SCAMPProto::SCAMPWork* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>> AsyncRequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>>(AsyncRequestSCAMPWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>> PrepareAsyncRequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>>(PrepareAsyncRequestSCAMPWorkRaw(context, request, cq));
    }
    ::grpc::Status SCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::SCAMPProto::SCAMPResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>> AsyncSCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>>(AsyncSCAMPCombinerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>> PrepareAsyncSCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>>(PrepareAsyncSCAMPCombinerRaw(context, request, cq));
    }
    ::grpc::Status ReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::SCAMPProto::SCAMPResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>> AsyncReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>>(AsyncReportTileFailureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>> PrepareAsyncReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>>(PrepareAsyncReportTileFailureRaw(context, request, cq));
    }
    ::grpc::Status IssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::SCAMPProto::SCAMPStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>> AsyncIssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>>(AsyncIssueNewJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>> PrepareAsyncIssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>>(PrepareAsyncIssueNewJobRaw(context, request, cq));
    }
    ::grpc::Status CheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::SCAMPProto::SCAMPStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>> AsyncCheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>>(AsyncCheckJobStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>> PrepareAsyncCheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>>(PrepareAsyncCheckJobStatusRaw(context, request, cq));
    }
    ::grpc::Status FetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::SCAMPProto::SCAMPWork* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>> AsyncFetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>>(AsyncFetchJobResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>> PrepareAsyncFetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>>(PrepareAsyncFetchJobResultRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)>) override;
      void RequestSCAMPWork(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)>) override;
      void RequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RequestSCAMPWork(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)>) override;
      void SCAMPCombiner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)>) override;
      void SCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SCAMPCombiner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)>) override;
      void ReportTileFailure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)>) override;
      void ReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ReportTileFailure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)>) override;
      void IssueNewJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)>) override;
      void IssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IssueNewJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)>) override;
      void CheckJobStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)>) override;
      void CheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckJobStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void FetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)>) override;
      void FetchJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)>) override;
      void FetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void FetchJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>* AsyncRequestSCAMPWorkRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>* PrepareAsyncRequestSCAMPWorkRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>* AsyncSCAMPCombinerRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>* PrepareAsyncSCAMPCombinerRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>* AsyncReportTileFailureRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>* PrepareAsyncReportTileFailureRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>* AsyncIssueNewJobRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>* PrepareAsyncIssueNewJobRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>* AsyncCheckJobStatusRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>* PrepareAsyncCheckJobStatusRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>* AsyncFetchJobResultRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>* PrepareAsyncFetchJobResultRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestSCAMPWork_;
    const ::grpc::internal::RpcMethod rpcmethod_SCAMPCombiner_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportTileFailure_;
    const ::grpc::internal::RpcMethod rpcmethod_IssueNewJob_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckJobStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchJobResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestSCAMPWork(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response);
    virtual ::grpc::Status SCAMPCombiner(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response);
    virtual ::grpc::Status ReportTileFailure(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response);
    virtual ::grpc::Status IssueNewJob(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response);
    virtual ::grpc::Status CheckJobStatus(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response);
    virtual ::grpc::Status FetchJobResult(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestSCAMPWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RequestSCAMPWork() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestSCAMPWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSCAMPWork(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSCAMPWork(::grpc::ServerContext* context, ::SCAMPProto::SCAMPRequest* request, ::grpc::ServerAsyncResponseWriter< ::SCAMPProto::SCAMPWork>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SCAMPCombiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SCAMPCombiner() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SCAMPCombiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SCAMPCombiner(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSCAMPCombiner(::grpc::ServerContext* context, ::SCAMPProto::SCAMPArgs* request, ::grpc::ServerAsyncResponseWriter< ::SCAMPProto::SCAMPResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportTileFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReportTileFailure() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReportTileFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTileFailure(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportTileFailure(::grpc::ServerContext* context, ::SCAMPProto::SCAMPArgs* request, ::grpc::ServerAsyncResponseWriter< ::SCAMPProto::SCAMPResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IssueNewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IssueNewJob() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_IssueNewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IssueNewJob(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIssueNewJob(::grpc::ServerContext* context, ::SCAMPProto::SCAMPArgs* request, ::grpc::ServerAsyncResponseWriter< ::SCAMPProto::SCAMPStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckJobStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CheckJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckJobStatus(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckJobStatus(::grpc::ServerContext* context, ::SCAMPProto::SCAMPJobID* request, ::grpc::ServerAsyncResponseWriter< ::SCAMPProto::SCAMPStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FetchJobResult() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_FetchJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJobResult(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJobResult(::grpc::ServerContext* context, ::SCAMPProto::SCAMPJobID* request, ::grpc::ServerAsyncResponseWriter< ::SCAMPProto::SCAMPWork>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestSCAMPWork<WithAsyncMethod_SCAMPCombiner<WithAsyncMethod_ReportTileFailure<WithAsyncMethod_IssueNewJob<WithAsyncMethod_CheckJobStatus<WithAsyncMethod_FetchJobResult<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestSCAMPWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RequestSCAMPWork() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPRequest, ::SCAMPProto::SCAMPWork>(
          [this](::grpc::ServerContext* context,
                 const ::SCAMPProto::SCAMPRequest* request,
                 ::SCAMPProto::SCAMPWork* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RequestSCAMPWork(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RequestSCAMPWork(
        ::grpc::experimental::MessageAllocator< ::SCAMPProto::SCAMPRequest, ::SCAMPProto::SCAMPWork>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPRequest, ::SCAMPProto::SCAMPWork>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestSCAMPWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSCAMPWork(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestSCAMPWork(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SCAMPCombiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SCAMPCombiner() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>(
          [this](::grpc::ServerContext* context,
                 const ::SCAMPProto::SCAMPArgs* request,
                 ::SCAMPProto::SCAMPResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SCAMPCombiner(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SCAMPCombiner(
        ::grpc::experimental::MessageAllocator< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SCAMPCombiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SCAMPCombiner(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SCAMPCombiner(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReportTileFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReportTileFailure() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>(
          [this](::grpc::ServerContext* context,
                 const ::SCAMPProto::SCAMPArgs* request,
                 ::SCAMPProto::SCAMPResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReportTileFailure(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ReportTileFailure(
        ::grpc::experimental::MessageAllocator< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReportTileFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTileFailure(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportTileFailure(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IssueNewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_IssueNewJob() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPStatus>(
          [this](::grpc::ServerContext* context,
                 const ::SCAMPProto::SCAMPArgs* request,
                 ::SCAMPProto::SCAMPStatus* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->IssueNewJob(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_IssueNewJob(
        ::grpc::experimental::MessageAllocator< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPStatus>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPStatus>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IssueNewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IssueNewJob(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IssueNewJob(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckJobStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPStatus>(
          [this](::grpc::ServerContext* context,
                 const ::SCAMPProto::SCAMPJobID* request,
                 ::SCAMPProto::SCAMPStatus* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckJobStatus(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckJobStatus(
        ::grpc::experimental::MessageAllocator< ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPStatus>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPStatus>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckJobStatus(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckJobStatus(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FetchJobResult() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPWork>(
          [this](::grpc::ServerContext* context,
                 const ::SCAMPProto::SCAMPJobID* request,
                 ::SCAMPProto::SCAMPWork* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->FetchJobResult(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_FetchJobResult(
        ::grpc::experimental::MessageAllocator< ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPWork>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPWork>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FetchJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJobResult(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FetchJobResult(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_RequestSCAMPWork<ExperimentalWithCallbackMethod_SCAMPCombiner<ExperimentalWithCallbackMethod_ReportTileFailure<ExperimentalWithCallbackMethod_IssueNewJob<ExperimentalWithCallbackMethod_CheckJobStatus<ExperimentalWithCallbackMethod_FetchJobResult<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestSCAMPWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RequestSCAMPWork() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestSCAMPWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSCAMPWork(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SCAMPCombiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SCAMPCombiner() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SCAMPCombiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SCAMPCombiner(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportTileFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReportTileFailure() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReportTileFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTileFailure(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IssueNewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IssueNewJob() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_IssueNewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IssueNewJob(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckJobStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CheckJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckJobStatus(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FetchJobResult() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_FetchJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJobResult(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestSCAMPWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RequestSCAMPWork() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestSCAMPWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSCAMPWork(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSCAMPWork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SCAMPCombiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SCAMPCombiner() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SCAMPCombiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SCAMPCombiner(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSCAMPCombiner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportTileFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReportTileFailure() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReportTileFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTileFailure(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportTileFailure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IssueNewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_IssueNewJob() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_IssueNewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IssueNewJob(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIssueNewJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckJobStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CheckJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckJobStatus(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckJobStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FetchJobResult() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_FetchJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJobResult(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJobResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestSCAMPWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestSCAMPWork() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RequestSCAMPWork(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestSCAMPWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSCAMPWork(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestSCAMPWork(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SCAMPCombiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SCAMPCombiner() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SCAMPCombiner(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SCAMPCombiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SCAMPCombiner(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SCAMPCombiner(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReportTileFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReportTileFailure() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReportTileFailure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReportTileFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTileFailure(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportTileFailure(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IssueNewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_IssueNewJob() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->IssueNewJob(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_IssueNewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IssueNewJob(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IssueNewJob(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckJobStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckJobStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckJobStatus(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckJobStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchJobResult() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FetchJobResult(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJobResult(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FetchJobResult(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestSCAMPWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RequestSCAMPWork() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::SCAMPProto::SCAMPRequest, ::SCAMPProto::SCAMPWork>(std::bind(&WithStreamedUnaryMethod_RequestSCAMPWork<BaseClass>::StreamedRequestSCAMPWork, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestSCAMPWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestSCAMPWork(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestSCAMPWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SCAMPProto::SCAMPRequest,::SCAMPProto::SCAMPWork>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SCAMPCombiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SCAMPCombiner() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>(std::bind(&WithStreamedUnaryMethod_SCAMPCombiner<BaseClass>::StreamedSCAMPCombiner, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SCAMPCombiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SCAMPCombiner(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSCAMPCombiner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SCAMPProto::SCAMPArgs,::SCAMPProto::SCAMPResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportTileFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReportTileFailure() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>(std::bind(&WithStreamedUnaryMethod_ReportTileFailure<BaseClass>::StreamedReportTileFailure, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportTileFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportTileFailure(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportTileFailure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SCAMPProto::SCAMPArgs,::SCAMPProto::SCAMPResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IssueNewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IssueNewJob() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPStatus>(std::bind(&WithStreamedUnaryMethod_IssueNewJob<BaseClass>::StreamedIssueNewJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IssueNewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IssueNewJob(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIssueNewJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SCAMPProto::SCAMPArgs,::SCAMPProto::SCAMPStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckJobStatus() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPStatus>(std::bind(&WithStreamedUnaryMethod_CheckJobStatus<BaseClass>::StreamedCheckJobStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckJobStatus(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckJobStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SCAMPProto::SCAMPJobID,::SCAMPProto::SCAMPStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FetchJobResult() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPWork>(std::bind(&WithStreamedUnaryMethod_FetchJobResult<BaseClass>::StreamedFetchJobResult, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FetchJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchJobResult(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchJobResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SCAMPProto::SCAMPJobID,::SCAMPProto::SCAMPWork>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestSCAMPWork<WithStreamedUnaryMethod_SCAMPCombiner<WithStreamedUnaryMethod_ReportTileFailure<WithStreamedUnaryMethod_IssueNewJob<WithStreamedUnaryMethod_CheckJobStatus<WithStreamedUnaryMethod_FetchJobResult<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestSCAMPWork<WithStreamedUnaryMethod_SCAMPCombiner<WithStreamedUnaryMethod_ReportTileFailure<WithStreamedUnaryMethod_IssueNewJob<WithStreamedUnaryMethod_CheckJobStatus<WithStreamedUnaryMethod_FetchJobResult<Service > > > > > > StreamedService;
};

}  // namespace SCAMPProto


#endif  // GRPC_scamp_2eproto__INCLUDED
