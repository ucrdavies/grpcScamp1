// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scamp.proto

#include "scamp.pb.h"
#include "scamp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace SCAMPProto {

static const char* SCAMPService_method_names[] = {
  "/SCAMPProto.SCAMPService/RequestSCAMPWork",
  "/SCAMPProto.SCAMPService/SCAMPCombiner",
  "/SCAMPProto.SCAMPService/ReportTileFailure",
  "/SCAMPProto.SCAMPService/IssueNewJob",
  "/SCAMPProto.SCAMPService/CheckJobStatus",
  "/SCAMPProto.SCAMPService/FetchJobResult",
};

std::unique_ptr< SCAMPService::Stub> SCAMPService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SCAMPService::Stub> stub(new SCAMPService::Stub(channel));
  return stub;
}

SCAMPService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RequestSCAMPWork_(SCAMPService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SCAMPCombiner_(SCAMPService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportTileFailure_(SCAMPService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IssueNewJob_(SCAMPService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckJobStatus_(SCAMPService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchJobResult_(SCAMPService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SCAMPService::Stub::RequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::SCAMPProto::SCAMPWork* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestSCAMPWork_, context, request, response);
}

void SCAMPService::Stub::experimental_async::RequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestSCAMPWork_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::RequestSCAMPWork(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestSCAMPWork_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::RequestSCAMPWork(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestSCAMPWork_, context, request, response, reactor);
}

void SCAMPService::Stub::experimental_async::RequestSCAMPWork(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestSCAMPWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>* SCAMPService::Stub::AsyncRequestSCAMPWorkRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPWork>::Create(channel_.get(), cq, rpcmethod_RequestSCAMPWork_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>* SCAMPService::Stub::PrepareAsyncRequestSCAMPWorkRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPWork>::Create(channel_.get(), cq, rpcmethod_RequestSCAMPWork_, context, request, false);
}

::grpc::Status SCAMPService::Stub::SCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::SCAMPProto::SCAMPResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SCAMPCombiner_, context, request, response);
}

void SCAMPService::Stub::experimental_async::SCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SCAMPCombiner_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::SCAMPCombiner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SCAMPCombiner_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::SCAMPCombiner(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SCAMPCombiner_, context, request, response, reactor);
}

void SCAMPService::Stub::experimental_async::SCAMPCombiner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SCAMPCombiner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>* SCAMPService::Stub::AsyncSCAMPCombinerRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPResult>::Create(channel_.get(), cq, rpcmethod_SCAMPCombiner_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>* SCAMPService::Stub::PrepareAsyncSCAMPCombinerRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPResult>::Create(channel_.get(), cq, rpcmethod_SCAMPCombiner_, context, request, false);
}

::grpc::Status SCAMPService::Stub::ReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::SCAMPProto::SCAMPResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReportTileFailure_, context, request, response);
}

void SCAMPService::Stub::experimental_async::ReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportTileFailure_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::ReportTileFailure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportTileFailure_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::ReportTileFailure(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportTileFailure_, context, request, response, reactor);
}

void SCAMPService::Stub::experimental_async::ReportTileFailure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportTileFailure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>* SCAMPService::Stub::AsyncReportTileFailureRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPResult>::Create(channel_.get(), cq, rpcmethod_ReportTileFailure_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPResult>* SCAMPService::Stub::PrepareAsyncReportTileFailureRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPResult>::Create(channel_.get(), cq, rpcmethod_ReportTileFailure_, context, request, false);
}

::grpc::Status SCAMPService::Stub::IssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::SCAMPProto::SCAMPStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IssueNewJob_, context, request, response);
}

void SCAMPService::Stub::experimental_async::IssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IssueNewJob_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::IssueNewJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IssueNewJob_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::IssueNewJob(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IssueNewJob_, context, request, response, reactor);
}

void SCAMPService::Stub::experimental_async::IssueNewJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IssueNewJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>* SCAMPService::Stub::AsyncIssueNewJobRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPStatus>::Create(channel_.get(), cq, rpcmethod_IssueNewJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>* SCAMPService::Stub::PrepareAsyncIssueNewJobRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPStatus>::Create(channel_.get(), cq, rpcmethod_IssueNewJob_, context, request, false);
}

::grpc::Status SCAMPService::Stub::CheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::SCAMPProto::SCAMPStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckJobStatus_, context, request, response);
}

void SCAMPService::Stub::experimental_async::CheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckJobStatus_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::CheckJobStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckJobStatus_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::CheckJobStatus(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckJobStatus_, context, request, response, reactor);
}

void SCAMPService::Stub::experimental_async::CheckJobStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckJobStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>* SCAMPService::Stub::AsyncCheckJobStatusRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPStatus>::Create(channel_.get(), cq, rpcmethod_CheckJobStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPStatus>* SCAMPService::Stub::PrepareAsyncCheckJobStatusRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPStatus>::Create(channel_.get(), cq, rpcmethod_CheckJobStatus_, context, request, false);
}

::grpc::Status SCAMPService::Stub::FetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::SCAMPProto::SCAMPWork* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FetchJobResult_, context, request, response);
}

void SCAMPService::Stub::experimental_async::FetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FetchJobResult_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::FetchJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FetchJobResult_, context, request, response, std::move(f));
}

void SCAMPService::Stub::experimental_async::FetchJobResult(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FetchJobResult_, context, request, response, reactor);
}

void SCAMPService::Stub::experimental_async::FetchJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SCAMPProto::SCAMPWork* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FetchJobResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>* SCAMPService::Stub::AsyncFetchJobResultRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPWork>::Create(channel_.get(), cq, rpcmethod_FetchJobResult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SCAMPProto::SCAMPWork>* SCAMPService::Stub::PrepareAsyncFetchJobResultRaw(::grpc::ClientContext* context, const ::SCAMPProto::SCAMPJobID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SCAMPProto::SCAMPWork>::Create(channel_.get(), cq, rpcmethod_FetchJobResult_, context, request, false);
}

SCAMPService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SCAMPService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SCAMPService::Service, ::SCAMPProto::SCAMPRequest, ::SCAMPProto::SCAMPWork>(
          std::mem_fn(&SCAMPService::Service::RequestSCAMPWork), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SCAMPService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SCAMPService::Service, ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>(
          std::mem_fn(&SCAMPService::Service::SCAMPCombiner), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SCAMPService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SCAMPService::Service, ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPResult>(
          std::mem_fn(&SCAMPService::Service::ReportTileFailure), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SCAMPService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SCAMPService::Service, ::SCAMPProto::SCAMPArgs, ::SCAMPProto::SCAMPStatus>(
          std::mem_fn(&SCAMPService::Service::IssueNewJob), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SCAMPService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SCAMPService::Service, ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPStatus>(
          std::mem_fn(&SCAMPService::Service::CheckJobStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SCAMPService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SCAMPService::Service, ::SCAMPProto::SCAMPJobID, ::SCAMPProto::SCAMPWork>(
          std::mem_fn(&SCAMPService::Service::FetchJobResult), this)));
}

SCAMPService::Service::~Service() {
}

::grpc::Status SCAMPService::Service::RequestSCAMPWork(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPRequest* request, ::SCAMPProto::SCAMPWork* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SCAMPService::Service::SCAMPCombiner(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SCAMPService::Service::ReportTileFailure(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SCAMPService::Service::IssueNewJob(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPArgs* request, ::SCAMPProto::SCAMPStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SCAMPService::Service::CheckJobStatus(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SCAMPService::Service::FetchJobResult(::grpc::ServerContext* context, const ::SCAMPProto::SCAMPJobID* request, ::SCAMPProto::SCAMPWork* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace SCAMPProto

